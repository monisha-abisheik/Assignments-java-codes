import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;



/*
INPUT                      OUTPUT
No of test case=2          TESTCASE 1=YES
TESTCASE 1:                TESTCASE 2=NO
String 1=hello
String 2=world
TESTCASE 2:
String 1=hi 
String 2=world
*/

class Result {

    

    public static String twoStrings(String s1, String s2) {
Set<Character> ch=new HashSet<>();
Set<Character> ch1=new HashSet<>();
for(int i=0;i<s1.length();i++) {
     ch.add(s1.charAt(i));
        }
        for(int i=0;i<s2.length();i++) {
            ch1.add(s2.charAt(i));
        }
        ch.retainAll(ch1);
        if(!ch.isEmpty())
        return "YES";
        else
        return "NO";
    }

}

public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int q = Integer.parseInt(bufferedReader.readLine().trim());

        IntStream.range(0, q).forEach(qItr -> {
            try {
                String s1 = bufferedReader.readLine();

                String s2 = bufferedReader.readLine();

                String result = Result.twoStrings(s1, s2);

                bufferedWriter.write(result);
                bufferedWriter.newLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        });

        bufferedReader.close();
        bufferedWriter.close();
    }
}
