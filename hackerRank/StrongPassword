import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;

class StrongPassword{

    /*
     * Complete the 'minimumNumber' function below.
     *
     * The function is expected to return an INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER n
     *  2. STRING password
     */

    public static int minimumNumber(int n, String password) {
   
   
   int lc = 0;
    int uc = 0;
    int nums = 0;
    int sc = 0;
    char[] passWord=password.toCharArray();
    int i;
    for(i = 0; i<passWord.length; i++)
    {
        if(passWord[i] >= 'a' && passWord[i] <= 'z')
            lc++;
        else if(passWord[i] >= 'A' && passWord[i] <= 'Z')
            uc++;
        else if(passWord[i] >= '0' && passWord[i] <= '9')
            nums++;
        else
            sc++;
    }
    int add = 0;
    if(lc == 0)
        add++;
    if(uc == 0)
        add++;
    if(nums == 0)
        add++;
    if(sc == 0)
        add++;
    
    n = n + add;
    
    if(n < 6)
        add = add + 6 - n;
    
    return add;
}
    }



public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = Integer.parseInt(bufferedReader.readLine().trim());

        String password = bufferedReader.readLine();

        int answer = Result.minimumNumber(n, password);

        bufferedWriter.write(String.valueOf(answer));
        bufferedWriter.newLine();

        bufferedReader.close();
        bufferedWriter.close();
    }
}
